<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
    <hashTree>
        <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
            <stringProp name="TestPlan.comments"></stringProp>
            <boolProp name="TestPlan.functional_mode">false</boolProp>
            <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
            <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="TestPlan.user_define_classpath"></stringProp>
        </TestPlan>
        <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Authentification Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                    <elementProp name="host" elementType="Argument">
                        <stringProp name="Argument.name">host</stringProp>
                        <stringProp name="Argument.value">${__P(site,a.blazemeter.com)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="host" elementType="Argument">
                        <stringProp name="Argument.name">host</stringProp>
                        <stringProp name="Argument.value">${__P(site,qa.blazemeter.com)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="protocol" elementType="Argument">
                        <stringProp name="Argument.name">protocol</stringProp>
                        <stringProp name="Argument.value">${__P(http,https)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="protocol" elementType="Argument">
                        <stringProp name="Argument.name">protocol</stringProp>
                        <stringProp name="Argument.value">${__P(http,http)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="email" elementType="Argument">
                        <stringProp name="Argument.name">email</stringProp>
                        <stringProp name="Argument.value">${__P(user_name,YourEmail@blazemeter.com)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="password" elementType="Argument">
                        <stringProp name="Argument.name">password</stringProp>
                        <stringProp name="Argument.value">${__P(password,Yourpassword)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="uName1111" elementType="Argument">
                        <stringProp name="Argument.name">uName1111</stringProp>
                        <stringProp name="Argument.value">empty</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="testPrefix" elementType="Argument">
                        <stringProp name="Argument.name">testPrefix</stringProp>
                        <stringProp name="Argument.value">${__P(testPrefix,Sanity)}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                </collectionProp>
            </Arguments>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Assertion Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                    <elementProp name="assertDuration" elementType="Argument">
                        <stringProp name="Argument.name">assertDuration</stringProp>
                        <stringProp name="Argument.value">10000</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="assertErrorNull" elementType="Argument">
                        <stringProp name="Argument.name">assertErrorNull</stringProp>
                        <stringProp name="Argument.value">&quot;error&quot;: null</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                    <elementProp name="maxRetries" elementType="Argument">
                        <stringProp name="Argument.name">maxRetries</stringProp>
                        <stringProp name="Argument.value">50</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                </collectionProp>
            </Arguments>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jenkins " enabled="true">
                <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
                <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">false</boolProp>
                    <stringProp name="LoopController.loops">1</stringProp>
                </elementProp>
                <stringProp name="ThreadGroup.num_threads">1</stringProp>
                <stringProp name="ThreadGroup.ramp_time">1</stringProp>
                <longProp name="ThreadGroup.start_time">1403436570000</longProp>
                <longProp name="ThreadGroup.end_time">1403436570000</longProp>
                <boolProp name="ThreadGroup.scheduler">false</boolProp>
                <stringProp name="ThreadGroup.duration"></stringProp>
                <stringProp name="ThreadGroup.delay"></stringProp>
            </ThreadGroup>
            <hashTree>
                <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Client Parameters" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                            <elementProp name="clientId" elementType="Argument">
                                <stringProp name="Argument.name">clientId</stringProp>
                                <stringProp name="Argument.value">_CI_JENKINS</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="clientVersion" elementType="Argument">
                                <stringProp name="Argument.name">clientVersion</stringProp>
                                <stringProp name="Argument.value">2.1&amp;%E2%80%8B</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="api-key" elementType="Argument">
                                <stringProp name="Argument.name">api-key</stringProp>
                                <stringProp name="Argument.value"></stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                            <elementProp name="app_key" elementType="Argument">
                                <stringProp name="Argument.name">app_key</stringProp>
                                <stringProp name="Argument.value">jnk100x987c06f4e10c4</stringProp>
                                <stringProp name="Argument.metadata">=</stringProp>
                            </elementProp>
                        </collectionProp>
                    </elementProp>
                </kg.apc.jmeter.control.ParameterizedController>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="API test for JEN with Yahoo JSON " enabled="true"/>
                <hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Json test" enabled="true"/>
                    <hashTree>
                        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Test Parameters" enabled="true">
                            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="testPrefix" elementType="Argument">
                                        <stringProp name="Argument.name">testPrefix</stringProp>
                                        <stringProp name="Argument.value">JSON Test</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="name" elementType="Argument">
                                        <stringProp name="Argument.name">name</stringProp>
                                        <stringProp name="Argument.value">RC</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="name" elementType="Argument">
                                        <stringProp name="Argument.name">name</stringProp>
                                        <stringProp name="Argument.value">${testPrefix} on docker ${__time(YY-MM-dd HH:mm:ss, TIMESTAMP)}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="location" elementType="Argument">
                                        <stringProp name="Argument.name">location</stringProp>
                                        <stringProp name="Argument.value">docker-opc-54d32715ca616e377b8b4567</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="duration" elementType="Argument">
                                        <stringProp name="Argument.name">duration</stringProp>
                                        <stringProp name="Argument.value">&quot;15m&quot;</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="rps" elementType="Argument">
                                        <stringProp name="Argument.name">rps</stringProp>
                                        <stringProp name="Argument.value">10</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="start_rps" elementType="Argument">
                                        <stringProp name="Argument.name">start_rps</stringProp>
                                        <stringProp name="Argument.value">1</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="end_rps" elementType="Argument">
                                        <stringProp name="Argument.name">end_rps</stringProp>
                                        <stringProp name="Argument.value">300</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="step_increment" elementType="Argument">
                                        <stringProp name="Argument.name">step_increment</stringProp>
                                        <stringProp name="Argument.value">25</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="step_duration" elementType="Argument">
                                        <stringProp name="Argument.name">step_duration</stringProp>
                                        <stringProp name="Argument.value">1</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="stop_test_on_violation" elementType="Argument">
                                        <stringProp name="Argument.name">stop_test_on_violation</stringProp>
                                        <stringProp name="Argument.value">true</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="avg_resp_time" elementType="Argument">
                                        <stringProp name="Argument.name">avg_resp_time</stringProp>
                                        <stringProp name="Argument.value">55000</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="max_resp_time" elementType="Argument">
                                        <stringProp name="Argument.name">max_resp_time</stringProp>
                                        <stringProp name="Argument.value">50</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="90_pctl_resp_time" elementType="Argument">
                                        <stringProp name="Argument.name">90_pctl_resp_time</stringProp>
                                        <stringProp name="Argument.value">10000</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="avg_latency" elementType="Argument">
                                        <stringProp name="Argument.name">avg_latency</stringProp>
                                        <stringProp name="Argument.value">10000</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="pctl" elementType="Argument">
                                        <stringProp name="Argument.name">pctl</stringProp>
                                        <stringProp name="Argument.value">99</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="resp_time" elementType="Argument">
                                        <stringProp name="Argument.name">resp_time</stringProp>
                                        <stringProp name="Argument.value">10000</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="cache_warm_up" elementType="Argument">
                                        <stringProp name="Argument.name">cache_warm_up</stringProp>
                                        <stringProp name="Argument.value">1</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="project_id" elementType="Argument">
                                        <stringProp name="Argument.name">project_id</stringProp>
                                        <stringProp name="Argument.value">null</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="warm_up_duration" elementType="Argument">
                                        <stringProp name="Argument.name">warm_up_duration</stringProp>
                                        <stringProp name="Argument.value">&quot;2m&quot;</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="locationUpdate" elementType="Argument">
                                        <stringProp name="Argument.name">locationUpdate</stringProp>
                                        <stringProp name="Argument.value">&quot;eu-west-1&quot;</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                    <elementProp name="durationUpdate" elementType="Argument">
                                        <stringProp name="Argument.name">durationUpdate</stringProp>
                                        <stringProp name="Argument.value">19</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                        </kg.apc.jmeter.control.ParameterizedController>
                        <hashTree/>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">500</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get tests " enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert id" enabled="true">
                                <stringProp name="JSON_PATH">$.result[0].id</stringProp>
                                <stringProp name="EXPECTED_VALUE"></stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action (Stop on error)" enabled="true">
                                <intProp name="OnError.action">1</intProp>
                            </ResultAction>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get user" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/user/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="apiKey assertion" enabled="true">
                                <stringProp name="JSON_PATH">$.apiKey</stringProp>
                                <stringProp name="EXPECTED_VALUE">${api-key}</stringProp>
                                <boolProp name="JSONVALIDATION">true</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="api-key assertion" enabled="true">
                                <stringProp name="JSON_PATH">$.api-key</stringProp>
                                <stringProp name="EXPECTED_VALUE">${api-key}</stringProp>
                                <boolProp name="JSONVALIDATION">true</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="false">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action (Stop on error)" enabled="true">
                                <intProp name="OnError.action">1</intProp>
                            </ResultAction>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create test with rps and rps steps" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">{&#xd;
                                            &quot;test&quot;: {&#xd;
                                            &quot;project_id&quot;: ${project_id},&#xd;
                                            &quot;name&quot;: &quot;${name} with rps and rps steps&quot;,&#xd;
                                            &quot;location&quot;: &quot;${location}&quot;,&#xd;
                                            &quot;duration&quot;: ${duration},&#xd;
                                            &quot;rps&quot;: ${rps},&#xd;
                                            &quot;cache_warm_up&quot;: {&#xd;
                                            &quot;warm_up_duration&quot;: ${warm_up_duration} },&#xd;
                                            &#xd;
                                            &#xd;
                                            &quot;rps_step_up&quot;: {&#xd;
                                            &quot;start_rps&quot;: ${start_rps},&#xd;
                                            &quot;end_rps&quot;: ${end_rps},&#xd;
                                            &quot;step_increment&quot;: ${step_increment},&#xd;
                                            &quot;step_duration&quot;: ${step_duration}&#xd;
                                            },&#xd;
                                            &quot;thresholds&quot;: {&#xd;
                                            &quot;stop_test_on_violation&quot;: ${stop_test_on_violation},&#xd;
                                            &quot;avg_resp_time&quot;: ${avg_resp_time},&#xd;
                                            &quot;max_resp_time&quot;: ${max_resp_time},&#xd;
                                            &quot;90_pctl_resp_time&quot;: ${90_pctl_resp_time},&#xd;
                                            &quot;avg_latency&quot;: ${avg_latency},&#xd;
                                            &quot;resp_time_pctl&quot;: {&#xd;
                                            &quot;pctl&quot;: ${pctl},&#xd;
                                            &quot;resp_time&quot;: ${resp_time}&#xd;
                                            }&#xd;
                                            },&#xd;
                                            &quot;user-logins&quot;: [{&#xd;
                                            &quot;id&quot;: 1,&#xd;
                                            &quot;username&quot;: &quot;user_1&quot;,&#xd;
                                            &quot;password&quot;: &quot;p2&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                            &quot;id&quot;: 2,&#xd;
                                            &quot;username&quot;: &quot;user_2&quot;,&#xd;
                                            &quot;password&quot;: &quot;p2&quot;&#xd;
                                            }],&#xd;
                                            &quot;common-headers&quot;: {&#xd;
                                            &quot;X-Custom-Header&quot;: &quot;blazemeter header value&quot;&#xd;
                                            },&#xd;
                                            &quot;common-login-id&quot;: 1,&#xd;
                                            &quot;urls&quot;: [{&#xd;
                                            &quot;url&quot;: &quot;http://demo.blazemeter.com/echo.php?url=1&quot;,&#xd;
                                            &quot;headers&quot;: {&#xd;
                                            &quot;Host&quot;: &quot;demo.blazemeter.com&quot;,&#xd;
                                            &quot;User-Agent&quot;: &quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36&quot;&#xd;
                                            },&#xd;
                                            &quot;login_id&quot;: 2&#xd;
                                            },&#xd;
                                            {&#xd;
                                            &quot;url&quot;: &quot;http://demo.blazemeter.com/echo.php?url=local/&quot;,&#xd;
                                            &quot;thresholds&quot;: {&#xd;
                                            &quot;max_resp_time&quot;: 30000&#xd;
                                            },&#xd;
                                            &quot;headers&quot;: {&#xd;
                                            &quot;Accept-Charset&quot;: &quot;ISO-8859-1&quot;&#xd;
                                            }&#xd;
                                            },&#xd;
                                            {&#xd;
                                            &quot;url&quot;: &quot;http://2demo.blazemeter.com/echo.php?name=filename&quot;,&#xd;
                                            &quot;login_id&quot;: 2&#xd;
                                            }]&#xd;
                                            }&#xd;
                                            }</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/custom?custom_test_type=yahoo&amp;api-key=${api-key}&amp;app_key=${app_key}&amp;_clientId=${clientId}&amp;_clientVersion=${clientVersion}=2.1&amp;%E2%80%8B</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get testID" enabled="true">
                                <stringProp name="VAR">testID</stringProp>
                                <stringProp name="JSONPATH">$.result.id</stringProp>
                                <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action (Stop on error)" enabled="true">
                                <intProp name="OnError.action">1</intProp>
                            </ResultAction>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT in ${testID} location ${locationUpdate}  and duration ${durationUpdate}" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">{ &#xd;
                                            &quot;configuration&quot;: {&#xd;
                                            &quot;location&quot;: ${locationUpdate}, &#xd;
                                            &quot;plugins&quot;: { &#xd;
                                            &quot;http&quot;: { &#xd;
                                            &quot;override&quot;: { &#xd;
                                            &quot;duration&quot;: ${durationUpdate}&#xd;
                                            }&#xd;
                                            }&#xd;
                                            }&#xd;
                                            }&#xd;
                                            }&#xd;
                                        </stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}?api-key=${api-key}&amp;app_key=${app_key}&amp;_clientId=${clientId}&amp;_clientVersion=${clientVersion}=2.1&amp;%E2%80%8B</stringProp>
                            <stringProp name="HTTPSampler.method">PUT</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assertion location" enabled="true">
                                <stringProp name="JSON_PATH">$.result.configuration.location</stringProp>
                                <stringProp name="EXPECTED_VALUE">${locationUpdate}</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assertion duration" enabled="true">
                                <stringProp name="JSON_PATH">$.result.configuration.plugins.http.override.duration</stringProp>
                                <stringProp name="EXPECTED_VALUE">${durationUpdate}</stringProp>
                                <boolProp name="JSONVALIDATION">true</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update ${testID} test with rps and rps steps" enabled="true">
                            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">{&#xd;
                                            &quot;test&quot;: {&#xd;
                                            &quot;project_id&quot;: ${project_id},&#xd;
                                            &quot;name&quot;: &quot;${name} with rps and rps steps&quot;,&#xd;
                                            &quot;location&quot;: &quot;${location}&quot;,&#xd;
                                            &quot;duration&quot;: ${duration},&#xd;
                                            &quot;rps&quot;: ${rps},&#xd;
                                            &quot;cache_warm_up&quot;: {&#xd;
                                            &quot;warm_up_duration&quot;: ${warm_up_duration} },&#xd;
                                            &#xd;
                                            &#xd;
                                            &quot;rps_step_up&quot;: {&#xd;
                                            &quot;start_rps&quot;: ${start_rps},&#xd;
                                            &quot;end_rps&quot;: ${end_rps},&#xd;
                                            &quot;step_increment&quot;: ${step_increment},&#xd;
                                            &quot;step_duration&quot;: ${step_duration}&#xd;
                                            },&#xd;
                                            &quot;thresholds&quot;: {&#xd;
                                            &quot;stop_test_on_violation&quot;: ${stop_test_on_violation},&#xd;
                                            &quot;avg_resp_time&quot;: ${avg_resp_time},&#xd;
                                            &quot;max_resp_time&quot;: ${max_resp_time},&#xd;
                                            &quot;90_pctl_resp_time&quot;: ${90_pctl_resp_time},&#xd;
                                            &quot;avg_latency&quot;: ${avg_latency},&#xd;
                                            &quot;resp_time_pctl&quot;: {&#xd;
                                            &quot;pctl&quot;: ${pctl},&#xd;
                                            &quot;resp_time&quot;: ${resp_time}&#xd;
                                            }&#xd;
                                            },&#xd;
                                            &quot;user-logins&quot;: [{&#xd;
                                            &quot;id&quot;: 1,&#xd;
                                            &quot;username&quot;: &quot;user_1&quot;,&#xd;
                                            &quot;password&quot;: &quot;p2&quot;&#xd;
                                            },&#xd;
                                            {&#xd;
                                            &quot;id&quot;: 2,&#xd;
                                            &quot;username&quot;: &quot;user_2&quot;,&#xd;
                                            &quot;password&quot;: &quot;p2&quot;&#xd;
                                            }],&#xd;
                                            &quot;common-headers&quot;: {&#xd;
                                            &quot;X-Custom-Header&quot;: &quot;blazemeter header value&quot;&#xd;
                                            },&#xd;
                                            &quot;common-login-id&quot;: 1,&#xd;
                                            &quot;urls&quot;: [{&#xd;
                                            &quot;url&quot;: &quot;http://demo.blazemeter.com/echo.php?url=1&quot;,&#xd;
                                            &quot;headers&quot;: {&#xd;
                                            &quot;Host&quot;: &quot;demo.blazemeter.com&quot;,&#xd;
                                            &quot;User-Agent&quot;: &quot;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36&quot;&#xd;
                                            },&#xd;
                                            &quot;login_id&quot;: 2&#xd;
                                            },&#xd;
                                            {&#xd;
                                            &quot;url&quot;: &quot;http://demo.blazemeter.com/echo.php?url=local/&quot;,&#xd;
                                            &quot;thresholds&quot;: {&#xd;
                                            &quot;stop_test_on_violation&quot;: ${stop_test_on_violation},&#xd;
                                            &quot;max_resp_time&quot;: 30000&#xd;
                                            },&#xd;
                                            &quot;headers&quot;: {&#xd;
                                            &quot;Accept-Charset&quot;: &quot;ISO-8859-1&quot;&#xd;
                                            }&#xd;
                                            },&#xd;
                                            {&#xd;
                                            &quot;url&quot;: &quot;http://2demo.blazemeter.com/echo.php?name=filename&quot;,&#xd;
                                            &quot;login_id&quot;: 2&#xd;
                                            }]&#xd;
                                            }&#xd;
                                            }</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}/custom?custom_test_type=yahoo&amp;api-key=${api-key}&amp;app_key=${app_key}&amp;_clientId=${clientId}&amp;_clientVersion=${clientVersion}=2.1&amp;%E2%80%8B</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action (Stop on error)" enabled="true">
                                <intProp name="OnError.action">1</intProp>
                            </ResultAction>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get testID" enabled="false">
                                <stringProp name="VAR">testID</stringProp>
                                <stringProp name="JSONPATH">$.result.id</stringProp>
                                <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get test ${testID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value"></stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get testID" enabled="false">
                                <stringProp name="VAR">testID</stringProp>
                                <stringProp name="JSONPATH">$.result.id</stringProp>
                                <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assertion testID" enabled="true">
                                <stringProp name="JSON_PATH">$.result.id</stringProp>
                                <stringProp name="EXPECTED_VALUE">${testID}</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start test ${testID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}/start?api-key=${api-key}&amp;app_key=${app_key}&amp;_clientId=${clientId}&amp;_clientVersion=${clientVersion}=2.1&amp;%E2%80%8B</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get sessionID" enabled="true">
                                <stringProp name="VAR">sessionID</stringProp>
                                <stringProp name="JSONPATH">$.result.sessionsId[0]</stringProp>
                                <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="Result Status Action (Stop on error)" enabled="true">
                                <intProp name="OnError.action">1</intProp>
                            </ResultAction>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create publicToken for share report" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/publicToken?api-key=${api-key}&amp;app_key=${app_key}&amp;_clientId=${clientId}&amp;_clientVersion=${clientVersion}=2.1&amp;%E2%80%8B</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get publicToken" enabled="true">
                                <stringProp name="VAR">publicToken</stringProp>
                                <stringProp name="JSONPATH">$.result.publicToken</stringProp>
                                <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get session ${sessionID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                <stringProp name="VAR">statusCode</stringProp>
                                <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Booting" enabled="true"/>
                        <hashTree>
                            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                                <stringProp name="WhileController.condition">${__javaScript( ${statusCode} &lt; 100 &amp;&amp; ${whileCounter} &lt; ${maxRetries})} </stringProp>
                            </WhileController>
                            <hashTree>
                                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                                    <stringProp name="CounterConfig.start">1</stringProp>
                                    <stringProp name="CounterConfig.end"></stringProp>
                                    <stringProp name="CounterConfig.incr">1</stringProp>
                                    <stringProp name="CounterConfig.name">whileCounter</stringProp>
                                    <stringProp name="CounterConfig.format"></stringProp>
                                    <boolProp name="CounterConfig.per_user">false</boolProp>
                                </CounterConfig>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Booting ${statusCode}%" enabled="true">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                        <collectionProp name="Arguments.arguments">
                                            <elementProp name="api-key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${api-key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">api-key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="app_key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${app_key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">app_key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientId" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientId}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientId</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientVersion</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                        </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                        <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                    </DurationAssertion>
                                    <hashTree/>
                                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                        <collectionProp name="Asserion.test_strings">
                                            <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                        </collectionProp>
                                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                        <boolProp name="Assertion.assume_success">false</boolProp>
                                        <intProp name="Assertion.test_type">16</intProp>
                                    </ResponseAssertion>
                                    <hashTree/>
                                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                        <stringProp name="VAR">statusCode</stringProp>
                                        <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                        <stringProp name="DEFAULT"></stringProp>
                                        <stringProp name="VARIABLE"></stringProp>
                                        <stringProp name="SUBJECT">BODY</stringProp>
                                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                    <hashTree/>
                                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                        <stringProp name="ConstantTimer.delay">15000</stringProp>
                                    </ConstantTimer>
                                    <hashTree/>
                                </hashTree>
                                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Data received " enabled="true">
                                    <stringProp name="IfController.condition">${__javaScript( ${statusCode} &gt;= 100)}</stringProp>
                                    <boolProp name="IfController.evaluateAll">false</boolProp>
                                </IfController>
                                <hashTree>
                                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data received ${statusCode}%" enabled="true">
                                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                            <collectionProp name="Arguments.arguments">
                                                <elementProp name="api-key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${api-key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">api-key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="app_key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${app_key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">app_key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientId" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientId}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientId</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientVersion</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                            </collectionProp>
                                        </elementProp>
                                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                        <stringProp name="HTTPSampler.port"></stringProp>
                                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                        <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                        <stringProp name="HTTPSampler.method">GET</stringProp>
                                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                    </HTTPSamplerProxy>
                                    <hashTree>
                                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                            <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                        </DurationAssertion>
                                        <hashTree/>
                                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                            <collectionProp name="Asserion.test_strings">
                                                <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                            </collectionProp>
                                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                            <boolProp name="Assertion.assume_success">false</boolProp>
                                            <intProp name="Assertion.test_type">16</intProp>
                                        </ResponseAssertion>
                                        <hashTree/>
                                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                            <stringProp name="VAR">statusCode</stringProp>
                                            <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                            <stringProp name="DEFAULT"></stringProp>
                                            <stringProp name="VARIABLE"></stringProp>
                                            <stringProp name="SUBJECT">BODY</stringProp>
                                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                        <hashTree/>
                                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                            <stringProp name="ConstantTimer.delay">15000</stringProp>
                                        </ConstantTimer>
                                        <hashTree/>
                                    </hashTree>
                                </hashTree>
                            </hashTree>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test is running" enabled="true"/>
                        <hashTree>
                            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                                <stringProp name="WhileController.condition">${__javaScript( ${statusCode} &gt;= 100 &amp;&amp;  ${statusCode} &lt; 140 &amp;&amp; ${whileCounter} &lt; ${maxRetries})} </stringProp>
                            </WhileController>
                            <hashTree>
                                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                                    <stringProp name="CounterConfig.start">1</stringProp>
                                    <stringProp name="CounterConfig.end"></stringProp>
                                    <stringProp name="CounterConfig.incr">1</stringProp>
                                    <stringProp name="CounterConfig.name">whileCounter</stringProp>
                                    <stringProp name="CounterConfig.format"></stringProp>
                                    <boolProp name="CounterConfig.per_user">false</boolProp>
                                </CounterConfig>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test is running" enabled="true">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                        <collectionProp name="Arguments.arguments">
                                            <elementProp name="api-key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${api-key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">api-key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="app_key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${app_key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">app_key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientId" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientId}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientId</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientVersion</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                        </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                        <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                    </DurationAssertion>
                                    <hashTree/>
                                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                        <collectionProp name="Asserion.test_strings">
                                            <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                        </collectionProp>
                                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                        <boolProp name="Assertion.assume_success">false</boolProp>
                                        <intProp name="Assertion.test_type">16</intProp>
                                    </ResponseAssertion>
                                    <hashTree/>
                                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                        <stringProp name="VAR">statusCode</stringProp>
                                        <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                        <stringProp name="DEFAULT"></stringProp>
                                        <stringProp name="VARIABLE"></stringProp>
                                        <stringProp name="SUBJECT">BODY</stringProp>
                                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                    <hashTree/>
                                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                        <stringProp name="ConstantTimer.delay">15000</stringProp>
                                    </ConstantTimer>
                                    <hashTree/>
                                </hashTree>
                                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Test is ended " enabled="true">
                                    <stringProp name="IfController.condition">${__javaScript( ${statusCode} == 140)}</stringProp>
                                    <boolProp name="IfController.evaluateAll">false</boolProp>
                                </IfController>
                                <hashTree>
                                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test is ended status code ${statusCode}" enabled="true">
                                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                            <collectionProp name="Arguments.arguments">
                                                <elementProp name="api-key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${api-key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">api-key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="app_key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${app_key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">app_key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientId" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientId}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientId</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientVersion</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                            </collectionProp>
                                        </elementProp>
                                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                        <stringProp name="HTTPSampler.port"></stringProp>
                                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                        <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                        <stringProp name="HTTPSampler.method">GET</stringProp>
                                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                    </HTTPSamplerProxy>
                                    <hashTree>
                                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                            <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                        </DurationAssertion>
                                        <hashTree/>
                                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                            <collectionProp name="Asserion.test_strings">
                                                <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                            </collectionProp>
                                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                            <boolProp name="Assertion.assume_success">false</boolProp>
                                            <intProp name="Assertion.test_type">16</intProp>
                                        </ResponseAssertion>
                                        <hashTree/>
                                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                            <stringProp name="VAR">statusCode</stringProp>
                                            <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                            <stringProp name="DEFAULT">error</stringProp>
                                            <stringProp name="VARIABLE"></stringProp>
                                            <stringProp name="SUBJECT">BODY</stringProp>
                                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                        <hashTree/>
                                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                            <stringProp name="ConstantTimer.delay">15000</stringProp>
                                        </ConstantTimer>
                                        <hashTree/>
                                    </hashTree>
                                </hashTree>
                            </hashTree>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get link to jtl_and_more" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/reports/logs</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
                                <stringProp name="JSON_PATH">$.result.data[(@.length-1)].filename</stringProp>
                                <stringProp name="EXPECTED_VALUE">jtls_and_more.zip</stringProp>
                                <boolProp name="JSONVALIDATION">true</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get dataURl" enabled="true">
                                <stringProp name="VAR">dataURl</stringProp>
                                <stringProp name="JSONPATH">$.result.data[(@.length-1)].dataUrl</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
                                <stringProp name="ConstantTimer.delay">5000</stringProp>
                            </ConstantTimer>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get jtl_and_more_zip from box" enabled="false">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${dataURl}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get jtl_and_more_zip from box" enabled="false">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${dataURl}=?api-key=${api-key}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get jtl_and_more_zip from amazon" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain"></stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">${dataURl}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                                <collectionProp name="HeaderManager.headers">
                                    <elementProp name="" elementType="Header">
                                        <stringProp name="Header.name">Content-Type</stringProp>
                                        <stringProp name="Header.value"></stringProp>
                                    </elementProp>
                                    <elementProp name="" elementType="Header">
                                        <stringProp name="Header.name"></stringProp>
                                        <stringProp name="Header.value"></stringProp>
                                    </elementProp>
                                </collectionProp>
                            </HeaderManager>
                            <hashTree/>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get aggregate report" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/reports/main/summary</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get avg" enabled="true">
                                <stringProp name="VAR">avg</stringProp>
                                <stringProp name="JSONPATH">$.result.summary[0].avg</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get fail" enabled="true">
                                <stringProp name="VAR">failed</stringProp>
                                <stringProp name="JSONPATH">$.result.summary[0].failed</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert lb ALL" enabled="true">
                                <stringProp name="JSON_PATH">$.result.summary[0].lb</stringProp>
                                <stringProp name="EXPECTED_VALUE">ALL</stringProp>
                                <boolProp name="JSONVALIDATION">true</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert id ALL" enabled="true">
                                <stringProp name="JSON_PATH">$.result.summary[0].id</stringProp>
                                <stringProp name="EXPECTED_VALUE">ALL</stringProp>
                                <boolProp name="JSONVALIDATION">true</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert hits" enabled="true">
                                <stringProp name="JSON_PATH">$.result.summary[0].hits</stringProp>
                                <stringProp name="EXPECTED_VALUE">&lt;=0</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert avg" enabled="true">
                                <stringProp name="JSON_PATH">$.result.summary[0].avg</stringProp>
                                <stringProp name="EXPECTED_VALUE">&lt;=0</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert failed" enabled="true">
                                <stringProp name="JSON_PATH">$.result.summary[0].failed</stringProp>
                                <stringProp name="EXPECTED_VALUE">&lt;=0</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get thresholds" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/reports/thresholds</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get avg" enabled="false">
                                <stringProp name="VAR">avg</stringProp>
                                <stringProp name="JSONPATH">$.result.summary[0].avg</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get fail" enabled="false">
                                <stringProp name="VAR">failed</stringProp>
                                <stringProp name="JSONPATH">$.result.summary[0].failed</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert name" enabled="true">
                                <stringProp name="JSON_PATH">$.result.name</stringProp>
                                <stringProp name="EXPECTED_VALUE">Thresholds</stringProp>
                                <boolProp name="JSONVALIDATION">true</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert session_id" enabled="true">
                                <stringProp name="JSON_PATH">$.result.session_id</stringProp>
                                <stringProp name="EXPECTED_VALUE">${sessionID}</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert dataUrl" enabled="true">
                                <stringProp name="JSON_PATH">$.result.dataUrl</stringProp>
                                <stringProp name="EXPECTED_VALUE"></stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert success" enabled="true">
                                <stringProp name="JSON_PATH">$.result.data.success</stringProp>
                                <stringProp name="EXPECTED_VALUE"></stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assert stop" enabled="true">
                                <stringProp name="JSON_PATH">$.result.data.stop</stringProp>
                                <stringProp name="EXPECTED_VALUE"></stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get junit XML thresholds" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="format" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">junit</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">format</stringProp>
                                    </elementProp>
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/reports/thresholds/data</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Shared report" enabled="true"/>
                        <hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get shared report" enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">/app/?public-token=${publicToken}#reports/${sessionID}/summary</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                    <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                </DurationAssertion>
                                <hashTree/>
                                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                        <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">16</intProp>
                                </ResponseAssertion>
                                <hashTree/>
                            </hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get dataURL for shared report" enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">api/latest/sessions/${sessionID}?public-token=${publicToken}</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                    <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                </DurationAssertion>
                                <hashTree/>
                                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                        <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">16</intProp>
                                </ResponseAssertion>
                                <hashTree/>
                                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="dataUrl" enabled="true">
                                    <stringProp name="VAR">dataUrl</stringProp>
                                    <stringProp name="JSONPATH">$.result.dataUrl</stringProp>
                                    <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                    <stringProp name="VARIABLE"></stringProp>
                                    <stringProp name="SUBJECT">BODY</stringProp>
                                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                <hashTree/>
                            </hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get print data for shared report" enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments">
                                        <elementProp name="public-token" elementType="HTTPArgument">
                                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                            <stringProp name="Argument.value">${publicToken}</stringProp>
                                            <stringProp name="Argument.metadata">=</stringProp>
                                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                            <stringProp name="Argument.name">public-token</stringProp>
                                        </elementProp>
                                    </collectionProp>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">api/latest/sessions/${sessionID}/print</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                    <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                </DurationAssertion>
                                <hashTree/>
                                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                        <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">16</intProp>
                                </ResponseAssertion>
                                <hashTree/>
                                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="dataUrl" enabled="false">
                                    <stringProp name="VAR">dataUrl</stringProp>
                                    <stringProp name="JSONPATH">$.result.dataUrl</stringProp>
                                    <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                    <stringProp name="VARIABLE"></stringProp>
                                    <stringProp name="SUBJECT">BODY</stringProp>
                                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                <hashTree/>
                            </hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get dataUrl2 for shared report" enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${dataUrl}?public-token=${publicToken}</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                    <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                </DurationAssertion>
                                <hashTree/>
                                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                        <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">16</intProp>
                                </ResponseAssertion>
                                <hashTree/>
                                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="dataUrl2" enabled="true">
                                    <stringProp name="VAR">dataUrl2</stringProp>
                                    <stringProp name="JSONPATH">$.result[0].dataUrl</stringProp>
                                    <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                    <stringProp name="VARIABLE"></stringProp>
                                    <stringProp name="SUBJECT">BODY</stringProp>
                                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                <hashTree/>
                            </hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get dataUrl3 link for shared report" enabled="true">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${dataUrl2}?public-token=${publicToken}</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                    <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                </DurationAssertion>
                                <hashTree/>
                                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                        <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">16</intProp>
                                </ResponseAssertion>
                                <hashTree/>
                                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="dataUrl3" enabled="true">
                                    <stringProp name="VAR">dataUrl3</stringProp>
                                    <stringProp name="JSONPATH">$.result.dataUrl</stringProp>
                                    <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                    <stringProp name="VARIABLE"></stringProp>
                                    <stringProp name="SUBJECT">BODY</stringProp>
                                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                <hashTree/>
                            </hashTree>
                            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get data from dataUrl3 link for shared report" enabled="false">
                                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                    <collectionProp name="Arguments.arguments"/>
                                </elementProp>
                                <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                <stringProp name="HTTPSampler.port"></stringProp>
                                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                <stringProp name="HTTPSampler.path">${dataUrl3}?public-token=${publicToken}</stringProp>
                                <stringProp name="HTTPSampler.method">GET</stringProp>
                                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                <boolProp name="HTTPSampler.monitor">false</boolProp>
                                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                            </HTTPSamplerProxy>
                            <hashTree>
                                <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                    <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                </DurationAssertion>
                                <hashTree/>
                                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="false">
                                    <collectionProp name="Asserion.test_strings">
                                        <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                    </collectionProp>
                                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                    <boolProp name="Assertion.assume_success">false</boolProp>
                                    <intProp name="Assertion.test_type">16</intProp>
                                </ResponseAssertion>
                                <hashTree/>
                                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="dataUrl3" enabled="false">
                                    <stringProp name="VAR">dataUrl3</stringProp>
                                    <stringProp name="JSONPATH">$.result.dataUrl</stringProp>
                                    <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                    <stringProp name="VARIABLE"></stringProp>
                                    <stringProp name="SUBJECT">BODY</stringProp>
                                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                <hashTree/>
                            </hashTree>
                        </hashTree>
                    </hashTree>
                    <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Checking  terminate and stop " enabled="true"/>
                    <hashTree>
                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                            <stringProp name="ConstantTimer.delay">500</stringProp>
                        </ConstantTimer>
                        <hashTree/>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get test ${testID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value"></stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assertion testID" enabled="true">
                                <stringProp name="JSON_PATH">$.result.id</stringProp>
                                <stringProp name="EXPECTED_VALUE">${testID}</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start test ${testID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}/start?api-key=${api-key}&amp;app_key=${app_key}&amp;_clientId=${clientId}&amp;_clientVersion=${clientVersion}=2.1&amp;%E2%80%8B</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get sessionID" enabled="true">
                                <stringProp name="VAR">sessionID</stringProp>
                                <stringProp name="JSONPATH">$.result.sessionsId[0]</stringProp>
                                <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get session ${sessionID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                <stringProp name="VAR">statusCode</stringProp>
                                <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test status code ${statusCode}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                <stringProp name="VAR">statusCode</stringProp>
                                <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                <stringProp name="DEFAULT">error</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get terminate test ${testID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value"></stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}/terminate</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assertion sessionID" enabled="true">
                                <stringProp name="JSON_PATH">$.result[0].session_id</stringProp>
                                <stringProp name="EXPECTED_VALUE">${sessionID}</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Booting" enabled="true"/>
                        <hashTree>
                            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                                <stringProp name="WhileController.condition">${__javaScript( ${statusCode} &lt; 100 &amp;&amp; ${whileCounter} &lt; ${maxRetries})} </stringProp>
                            </WhileController>
                            <hashTree>
                                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                                    <stringProp name="CounterConfig.start">1</stringProp>
                                    <stringProp name="CounterConfig.end"></stringProp>
                                    <stringProp name="CounterConfig.incr">1</stringProp>
                                    <stringProp name="CounterConfig.name">whileCounter</stringProp>
                                    <stringProp name="CounterConfig.format"></stringProp>
                                    <boolProp name="CounterConfig.per_user">false</boolProp>
                                </CounterConfig>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Booting ${statusCode}%" enabled="true">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                        <collectionProp name="Arguments.arguments">
                                            <elementProp name="api-key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${api-key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">api-key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="app_key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${app_key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">app_key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientId" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientId}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientId</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientVersion</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                        </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                        <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                    </DurationAssertion>
                                    <hashTree/>
                                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                        <collectionProp name="Asserion.test_strings">
                                            <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                        </collectionProp>
                                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                        <boolProp name="Assertion.assume_success">false</boolProp>
                                        <intProp name="Assertion.test_type">16</intProp>
                                    </ResponseAssertion>
                                    <hashTree/>
                                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                        <stringProp name="VAR">statusCode</stringProp>
                                        <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                        <stringProp name="DEFAULT"></stringProp>
                                        <stringProp name="VARIABLE"></stringProp>
                                        <stringProp name="SUBJECT">BODY</stringProp>
                                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                    <hashTree/>
                                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                        <stringProp name="ConstantTimer.delay">15000</stringProp>
                                    </ConstantTimer>
                                    <hashTree/>
                                </hashTree>
                                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="data received " enabled="true">
                                    <stringProp name="IfController.condition">${__javaScript( ${statusCode} &gt;= 100)}</stringProp>
                                    <boolProp name="IfController.evaluateAll">false</boolProp>
                                </IfController>
                                <hashTree>
                                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data received ${statusCode}%" enabled="true">
                                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                            <collectionProp name="Arguments.arguments">
                                                <elementProp name="api-key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${api-key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">api-key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="app_key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${app_key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">app_key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientId" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientId}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientId</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientVersion</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                            </collectionProp>
                                        </elementProp>
                                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                        <stringProp name="HTTPSampler.port"></stringProp>
                                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                        <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                        <stringProp name="HTTPSampler.method">GET</stringProp>
                                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                    </HTTPSamplerProxy>
                                    <hashTree>
                                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                            <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                        </DurationAssertion>
                                        <hashTree/>
                                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                            <collectionProp name="Asserion.test_strings">
                                                <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                            </collectionProp>
                                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                            <boolProp name="Assertion.assume_success">false</boolProp>
                                            <intProp name="Assertion.test_type">16</intProp>
                                        </ResponseAssertion>
                                        <hashTree/>
                                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                            <stringProp name="VAR">statusCode</stringProp>
                                            <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                            <stringProp name="DEFAULT"></stringProp>
                                            <stringProp name="VARIABLE"></stringProp>
                                            <stringProp name="SUBJECT">BODY</stringProp>
                                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                        <hashTree/>
                                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                            <stringProp name="ConstantTimer.delay">15000</stringProp>
                                        </ConstantTimer>
                                        <hashTree/>
                                    </hashTree>
                                </hashTree>
                            </hashTree>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test is running" enabled="true"/>
                        <hashTree>
                            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                                <stringProp name="WhileController.condition">${__javaScript( ${statusCode} &gt;= 100 &amp;&amp;  ${statusCode} &lt; 140 &amp;&amp; ${whileCounter} &lt; ${maxRetries})} </stringProp>
                            </WhileController>
                            <hashTree>
                                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                                    <stringProp name="CounterConfig.start">1</stringProp>
                                    <stringProp name="CounterConfig.end"></stringProp>
                                    <stringProp name="CounterConfig.incr">1</stringProp>
                                    <stringProp name="CounterConfig.name">whileCounter</stringProp>
                                    <stringProp name="CounterConfig.format"></stringProp>
                                    <boolProp name="CounterConfig.per_user">false</boolProp>
                                </CounterConfig>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test is running" enabled="true">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                        <collectionProp name="Arguments.arguments">
                                            <elementProp name="api-key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${api-key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">api-key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="app_key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${app_key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">app_key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientId" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientId}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientId</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientVersion</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                        </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                        <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                    </DurationAssertion>
                                    <hashTree/>
                                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                        <collectionProp name="Asserion.test_strings">
                                            <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                        </collectionProp>
                                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                        <boolProp name="Assertion.assume_success">false</boolProp>
                                        <intProp name="Assertion.test_type">16</intProp>
                                    </ResponseAssertion>
                                    <hashTree/>
                                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                        <stringProp name="VAR">statusCode</stringProp>
                                        <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                        <stringProp name="DEFAULT"></stringProp>
                                        <stringProp name="VARIABLE"></stringProp>
                                        <stringProp name="SUBJECT">BODY</stringProp>
                                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                    <hashTree/>
                                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                        <stringProp name="ConstantTimer.delay">15000</stringProp>
                                    </ConstantTimer>
                                    <hashTree/>
                                </hashTree>
                                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Test is ended " enabled="true">
                                    <stringProp name="IfController.condition">${__javaScript( ${statusCode} == 140)}</stringProp>
                                    <boolProp name="IfController.evaluateAll">false</boolProp>
                                </IfController>
                                <hashTree>
                                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test is ended status code ${statusCode}" enabled="true">
                                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                            <collectionProp name="Arguments.arguments">
                                                <elementProp name="api-key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${api-key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">api-key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="app_key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${app_key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">app_key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientId" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientId}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientId</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientVersion</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                            </collectionProp>
                                        </elementProp>
                                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                        <stringProp name="HTTPSampler.port"></stringProp>
                                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                        <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                        <stringProp name="HTTPSampler.method">GET</stringProp>
                                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                    </HTTPSamplerProxy>
                                    <hashTree>
                                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                            <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                        </DurationAssertion>
                                        <hashTree/>
                                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                            <collectionProp name="Asserion.test_strings">
                                                <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                            </collectionProp>
                                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                            <boolProp name="Assertion.assume_success">false</boolProp>
                                            <intProp name="Assertion.test_type">16</intProp>
                                        </ResponseAssertion>
                                        <hashTree/>
                                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                            <stringProp name="VAR">statusCode</stringProp>
                                            <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                            <stringProp name="DEFAULT">error</stringProp>
                                            <stringProp name="VARIABLE"></stringProp>
                                            <stringProp name="SUBJECT">BODY</stringProp>
                                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                        <hashTree/>
                                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                            <stringProp name="ConstantTimer.delay">15000</stringProp>
                                        </ConstantTimer>
                                        <hashTree/>
                                    </hashTree>
                                </hashTree>
                            </hashTree>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start test ${testID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments"/>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}/start?api-key=${api-key}&amp;app_key=${app_key}&amp;_clientId=${clientId}&amp;_clientVersion=${clientVersion}=2.1&amp;%E2%80%8B</stringProp>
                            <stringProp name="HTTPSampler.method">POST</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get sessionID" enabled="true">
                                <stringProp name="VAR">sessionID</stringProp>
                                <stringProp name="JSONPATH">$.result.sessionsId[0]</stringProp>
                                <stringProp name="DEFAULT">NOT_FOUND</stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get session ${sessionID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                <stringProp name="VAR">statusCode</stringProp>
                                <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                <stringProp name="DEFAULT"></stringProp>
                                <stringProp name="VARIABLE"></stringProp>
                                <stringProp name="SUBJECT">BODY</stringProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                            <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Booting" enabled="true"/>
                        <hashTree>
                            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                                <stringProp name="WhileController.condition">${__javaScript( ${statusCode} &lt; 100 &amp;&amp; ${whileCounter} &lt; ${maxRetries})} </stringProp>
                            </WhileController>
                            <hashTree>
                                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                                    <stringProp name="CounterConfig.start">1</stringProp>
                                    <stringProp name="CounterConfig.end"></stringProp>
                                    <stringProp name="CounterConfig.incr">1</stringProp>
                                    <stringProp name="CounterConfig.name">whileCounter</stringProp>
                                    <stringProp name="CounterConfig.format"></stringProp>
                                    <boolProp name="CounterConfig.per_user">false</boolProp>
                                </CounterConfig>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Booting ${statusCode}%" enabled="true">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                        <collectionProp name="Arguments.arguments">
                                            <elementProp name="api-key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${api-key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">api-key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="app_key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${app_key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">app_key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientId" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientId}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientId</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientVersion</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                        </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                        <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                    </DurationAssertion>
                                    <hashTree/>
                                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                        <collectionProp name="Asserion.test_strings">
                                            <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                        </collectionProp>
                                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                        <boolProp name="Assertion.assume_success">false</boolProp>
                                        <intProp name="Assertion.test_type">16</intProp>
                                    </ResponseAssertion>
                                    <hashTree/>
                                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                        <stringProp name="VAR">statusCode</stringProp>
                                        <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                        <stringProp name="DEFAULT"></stringProp>
                                        <stringProp name="VARIABLE"></stringProp>
                                        <stringProp name="SUBJECT">BODY</stringProp>
                                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                    <hashTree/>
                                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                        <stringProp name="ConstantTimer.delay">15000</stringProp>
                                    </ConstantTimer>
                                    <hashTree/>
                                </hashTree>
                                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="data received " enabled="true">
                                    <stringProp name="IfController.condition">${__javaScript( ${statusCode} &gt;= 100)}</stringProp>
                                    <boolProp name="IfController.evaluateAll">false</boolProp>
                                </IfController>
                                <hashTree>
                                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data received ${statusCode}%" enabled="true">
                                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                            <collectionProp name="Arguments.arguments">
                                                <elementProp name="api-key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${api-key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">api-key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="app_key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${app_key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">app_key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientId" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientId}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientId</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientVersion</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                            </collectionProp>
                                        </elementProp>
                                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                        <stringProp name="HTTPSampler.port"></stringProp>
                                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                        <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                        <stringProp name="HTTPSampler.method">GET</stringProp>
                                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                    </HTTPSamplerProxy>
                                    <hashTree>
                                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                            <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                        </DurationAssertion>
                                        <hashTree/>
                                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                            <collectionProp name="Asserion.test_strings">
                                                <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                            </collectionProp>
                                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                            <boolProp name="Assertion.assume_success">false</boolProp>
                                            <intProp name="Assertion.test_type">16</intProp>
                                        </ResponseAssertion>
                                        <hashTree/>
                                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                            <stringProp name="VAR">statusCode</stringProp>
                                            <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                            <stringProp name="DEFAULT"></stringProp>
                                            <stringProp name="VARIABLE"></stringProp>
                                            <stringProp name="SUBJECT">BODY</stringProp>
                                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                        <hashTree/>
                                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                            <stringProp name="ConstantTimer.delay">15000</stringProp>
                                        </ConstantTimer>
                                        <hashTree/>
                                    </hashTree>
                                </hashTree>
                            </hashTree>
                        </hashTree>
                        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get stop test ${testID}" enabled="true">
                            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                <collectionProp name="Arguments.arguments">
                                    <elementProp name="api-key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${api-key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">api-key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="app_key" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${app_key}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">app_key</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientId" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientId}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientId</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="_clientVersion" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value">${clientVersion}</stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                        <stringProp name="Argument.name">_clientVersion</stringProp>
                                        <stringProp name="Argument.desc">false</stringProp>
                                    </elementProp>
                                    <elementProp name="" elementType="HTTPArgument">
                                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                        <stringProp name="Argument.value"></stringProp>
                                        <stringProp name="Argument.metadata">=</stringProp>
                                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                    </elementProp>
                                </collectionProp>
                            </elementProp>
                            <stringProp name="HTTPSampler.domain">${host}</stringProp>
                            <stringProp name="HTTPSampler.port"></stringProp>
                            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                            <stringProp name="HTTPSampler.response_timeout"></stringProp>
                            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                            <stringProp name="HTTPSampler.path">/api/latest/tests/${testID}/stop</stringProp>
                            <stringProp name="HTTPSampler.method">GET</stringProp>
                            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                            <boolProp name="HTTPSampler.monitor">false</boolProp>
                            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        </HTTPSamplerProxy>
                        <hashTree>
                            <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                            </DurationAssertion>
                            <hashTree/>
                            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                <collectionProp name="Asserion.test_strings">
                                    <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                </collectionProp>
                                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                <boolProp name="Assertion.assume_success">false</boolProp>
                                <intProp name="Assertion.test_type">16</intProp>
                            </ResponseAssertion>
                            <hashTree/>
                            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Assertion sessionID" enabled="true">
                                <stringProp name="JSON_PATH">$.result[0].session_id</stringProp>
                                <stringProp name="EXPECTED_VALUE">${sessionID}</stringProp>
                                <boolProp name="JSONVALIDATION">false</boolProp>
                                <boolProp name="EXPECT_NULL">false</boolProp>
                            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
                            <hashTree/>
                        </hashTree>
                        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test is running" enabled="true"/>
                        <hashTree>
                            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                                <stringProp name="WhileController.condition">${__javaScript( ${statusCode} &gt;= 100 &amp;&amp;  ${statusCode} &lt; 140 &amp;&amp; ${whileCounter} &lt; ${maxRetries})} </stringProp>
                            </WhileController>
                            <hashTree>
                                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                                    <stringProp name="CounterConfig.start">1</stringProp>
                                    <stringProp name="CounterConfig.end"></stringProp>
                                    <stringProp name="CounterConfig.incr">1</stringProp>
                                    <stringProp name="CounterConfig.name">whileCounter</stringProp>
                                    <stringProp name="CounterConfig.format"></stringProp>
                                    <boolProp name="CounterConfig.per_user">false</boolProp>
                                </CounterConfig>
                                <hashTree/>
                                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test is running" enabled="true">
                                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                        <collectionProp name="Arguments.arguments">
                                            <elementProp name="api-key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${api-key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">api-key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="app_key" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${app_key}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">app_key</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientId" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientId}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientId</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                            <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                <stringProp name="Argument.metadata">=</stringProp>
                                                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                <stringProp name="Argument.name">_clientVersion</stringProp>
                                                <stringProp name="Argument.desc">false</stringProp>
                                            </elementProp>
                                        </collectionProp>
                                    </elementProp>
                                    <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                    <stringProp name="HTTPSampler.port"></stringProp>
                                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                    <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                    <stringProp name="HTTPSampler.method">GET</stringProp>
                                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                    <boolProp name="HTTPSampler.monitor">false</boolProp>
                                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                </HTTPSamplerProxy>
                                <hashTree>
                                    <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                        <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                    </DurationAssertion>
                                    <hashTree/>
                                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                        <collectionProp name="Asserion.test_strings">
                                            <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                        </collectionProp>
                                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                        <boolProp name="Assertion.assume_success">false</boolProp>
                                        <intProp name="Assertion.test_type">16</intProp>
                                    </ResponseAssertion>
                                    <hashTree/>
                                    <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                        <stringProp name="VAR">statusCode</stringProp>
                                        <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                        <stringProp name="DEFAULT"></stringProp>
                                        <stringProp name="VARIABLE"></stringProp>
                                        <stringProp name="SUBJECT">BODY</stringProp>
                                    </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                    <hashTree/>
                                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                        <stringProp name="ConstantTimer.delay">15000</stringProp>
                                    </ConstantTimer>
                                    <hashTree/>
                                </hashTree>
                                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Test is ended " enabled="true">
                                    <stringProp name="IfController.condition">${__javaScript( ${statusCode} == 140)}</stringProp>
                                    <boolProp name="IfController.evaluateAll">false</boolProp>
                                </IfController>
                                <hashTree>
                                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Test is ended status code ${statusCode}" enabled="true">
                                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                                            <collectionProp name="Arguments.arguments">
                                                <elementProp name="api-key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${api-key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">api-key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="app_key" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${app_key}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">app_key</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientId" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientId}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientId</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                                <elementProp name="_clientVersion" elementType="HTTPArgument">
                                                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                                                    <stringProp name="Argument.value">${clientVersion}</stringProp>
                                                    <stringProp name="Argument.metadata">=</stringProp>
                                                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                                                    <stringProp name="Argument.name">_clientVersion</stringProp>
                                                    <stringProp name="Argument.desc">false</stringProp>
                                                </elementProp>
                                            </collectionProp>
                                        </elementProp>
                                        <stringProp name="HTTPSampler.domain">${host}</stringProp>
                                        <stringProp name="HTTPSampler.port"></stringProp>
                                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                                        <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                                        <stringProp name="HTTPSampler.path">/api/latest/sessions/${sessionID}/</stringProp>
                                        <stringProp name="HTTPSampler.method">GET</stringProp>
                                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                                        <boolProp name="HTTPSampler.monitor">false</boolProp>
                                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                                    </HTTPSamplerProxy>
                                    <hashTree>
                                        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                                            <stringProp name="DurationAssertion.duration">${assertDuration}</stringProp>
                                        </DurationAssertion>
                                        <hashTree/>
                                        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert error" enabled="true">
                                            <collectionProp name="Asserion.test_strings">
                                                <stringProp name="-2005920405">${assertErrorNull}</stringProp>
                                            </collectionProp>
                                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                                            <boolProp name="Assertion.assume_success">false</boolProp>
                                            <intProp name="Assertion.test_type">16</intProp>
                                        </ResponseAssertion>
                                        <hashTree/>
                                        <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - get statusCode" enabled="true">
                                            <stringProp name="VAR">statusCode</stringProp>
                                            <stringProp name="JSONPATH">$.result.statusCode</stringProp>
                                            <stringProp name="DEFAULT">error</stringProp>
                                            <stringProp name="VARIABLE"></stringProp>
                                            <stringProp name="SUBJECT">BODY</stringProp>
                                        </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                                        <hashTree/>
                                        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                                            <stringProp name="ConstantTimer.delay">15000</stringProp>
                                        </ConstantTimer>
                                        <hashTree/>
                                    </hashTree>
                                </hashTree>
                            </hashTree>
                        </hashTree>
                    </hashTree>
                </hashTree>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                    <boolProp name="ResultCollector.error_logging">false</boolProp>
                    <objProp>
                        <name>saveConfig</name>
                        <value class="SampleSaveConfiguration">
                            <time>true</time>
                            <latency>true</latency>
                            <timestamp>true</timestamp>
                            <success>true</success>
                            <label>true</label>
                            <code>true</code>
                            <message>true</message>
                            <threadName>true</threadName>
                            <dataType>true</dataType>
                            <encoding>false</encoding>
                            <assertions>true</assertions>
                            <subresults>true</subresults>
                            <responseData>true</responseData>
                            <samplerData>true</samplerData>
                            <xml>true</xml>
                            <fieldNames>false</fieldNames>
                            <responseHeaders>true</responseHeaders>
                            <requestHeaders>true</requestHeaders>
                            <responseDataOnError>false</responseDataOnError>
                            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                            <assertionsResultsToSave>0</assertionsResultsToSave>
                            <bytes>true</bytes>
                            <hostname>true</hostname>
                            <threadCounts>true</threadCounts>
                            <sampleCount>true</sampleCount>
                        </value>
                    </objProp>
                    <stringProp name="filename">results_${testPrefix}_test.xml</stringProp>
                </ResultCollector>
                <hashTree/>
            </hashTree>
        </hashTree>
        <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
            <boolProp name="WorkBench.save">true</boolProp>
        </WorkBench>
        <hashTree>
            <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
                <stringProp name="ProxyControlGui.port">8008</stringProp>
                <collectionProp name="ProxyControlGui.exclude_list">
                    <stringProp name="-996133953">.*\.(bmp.*|css.*|js.*|gif.*|ico|jpe?g|png|swf|woff|svg)</stringProp>
                </collectionProp>
                <collectionProp name="ProxyControlGui.include_list"/>
                <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
                <intProp name="ProxyControlGui.grouping_mode">0</intProp>
                <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
                <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
                <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
                <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
                <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
                <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
                <boolProp name="ProxyControlGui.regex_match">false</boolProp>
                <stringProp name="ProxyControlGui.content_type_include"></stringProp>
                <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
                <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
            </ProxyControl>
            <hashTree/>
        </hashTree>
    </hashTree>
</jmeterTestPlan>
